{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/pages/recap.css') }}">
{% endblock %}

{% block body %}
    <section class="dashboard">
        <div class="element">
            <h1>Tableau récapitulatif</h1>

            <div class="filter-links">
                <p>Liste des filtres par catégorie :</p>
                <a href="{{ path('recap', {'id': account.id}) }}">All</a>
                {% for category in uniqueCategories %}
                    <a href="{{ path('recap', {'id': account.id, 'categoryFilter': category, 'typeFilter': typeFilter}) }}">{{ category }}</a>
                {% endfor %}
            </div>

            <div class="type-filter-links">
                <p>Liste des filtres par type :</p>
                <a href="{{ path('recap', {'id': account.id}) }}">All Types</a>
                <a href="{{ path('recap', {'id': account.id, 'typeFilter': 'Income'}) }}">Income</a>
                <a href="{{ path('recap', {'id': account.id, 'typeFilter': 'Expense'}) }}">Expense</a>
            </div>
        </div>
        <div class="element">
            <table>
                <thead>
                <tr>
                    <th>id</th>
                    <th>type</th>
                    <th>Description</th>
                    <th>Date</th>
                    <th>Montant</th>
                    <th>Category</th>
                </tr>
                </thead>
                <tbody>
                {% for item in recapItems %}
                    {% if (typeFilter is null or item.type == typeFilter) and (categoryFilter is null or item.categoryName == categoryFilter) %}
                        <tr>
                            <td>{{ item.id }}</td>
                            <td style="color: {{ item.type == 'Income' ? 'green' : 'red' }}">
                                {{ item.type }}
                            </td>
                            <td>{{ item.description }}</td>
                            <td>{{ item.date|date('d-m-Y') }}</td>
                            <td style="color: {{ item.type == 'Income' ? 'green' : 'red' }}">
                                {{ item.type == 'Income' ? '+' : '-' }}  {{ item.amount }}
                            </td>
                            <td>{{ item.categoryName }}</td>
                        </tr>
                    {% endif %}
                {% endfor %}
                </tbody>
            </table>
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Écouter les changements d'état des boutons radio
            var categoryFilterRadios = document.querySelectorAll('input[name="categoryFilter"]');
            var typeFilterRadios = document.querySelectorAll('input[name="typeFilter"]');

            categoryFilterRadios.forEach(function (radio) {
                radio.addEventListener('change', function () {
                    filterItems();
                });
            });

            typeFilterRadios.forEach(function (radio) {
                radio.addEventListener('change', function () {
                    filterItems();
                });
            });

            // Appeler la fonction de filtrage initiale
            filterItems();

            function filterItems() {
                // Récupérer les valeurs sélectionnées
                var selectedCategoryFilter = getCategoryFilter();
                var selectedTypeFilter = getTypeFilter();

                // Effectuer votre requête fetch en utilisant les paramètres de filtre
                fetch("{{ path('recap', {'id': account.id}) }}?categoryFilter=" + selectedCategoryFilter + "&typeFilter=" + selectedTypeFilter)
                    .then(response => response.json())
                    .then(data => {
                        // Mettre à jour le contenu de la page avec les données filtrées
                        // (Vous devrez adapter cela à la structure réelle de votre page)
                        updatePageContent(data);
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des données:', error);
                    });
            }

            function getCategoryFilter() {
                var selectedRadio = document.querySelector('input[name="categoryFilter"]:checked');
                return selectedRadio ? selectedRadio.value : '';
            }

            function getTypeFilter() {
                var selectedRadio = document.querySelector('input[name="typeFilter"]:checked');
                return selectedRadio ? selectedRadio.value : '';
            }

            function updatePageContent(data) {
                // Mettre à jour le contenu de la page avec les données filtrées
                // (Vous devrez adapter cela à la structure réelle de votre page)
                console.log(data);
            }
        });
    </script>
{% endblock %}
