{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/pages/dashboard.css') }}">
{% endblock %}

{% block body %}
    <section class="dashboard">
        <div class="header">
            <div class="element top3">
                <h3><span data-tooltip="Top 3 of most fortunate account actually registered on ratWallet." class="tooltip-container">#TOP 3 :</span></h3>
                <ul>
                    {% for topAccount in topAccounts %}
                    <!-- <li>{{ topAccount.userID.username }} -> {{ topAccount.nameAccount }} : {{ topAccount.balance }} €</li> -->
                        <li>Number #{{ loop.index }} : <span class="background-plain">{{ topAccount.balance }}€</span></li>
                    {% endfor %}
                </ul>
            </div>
            <div class="element stats">
                <h3>SOME GLOBAL STATISTICS :</h3>
                {% if balanceSum is defined %}
                    <p><b><span class="background-plain">{{ balanceSum }} €</span></b> >  <u>Sold</u> Total of All your Account combined. </p>
                {% else %}
                    <p>Create one or more accounts to display their statistics.</p>
                {% endif %}

                {% if totalExpenseSum is defined %}
                    <p><span class="background-plain">{{ totalExpenseSum }} €</span> >  <u>Expenses</u> Total of All your Account combined.</p>
                {% else %}
                    <p>You don't have any Expense register actually so we can not build statistic about it.</p>
                {% endif %}

                {% if totalIncomeSum is defined %}
                    <p><span class="background-plain">{{ totalIncomeSum }} €</span> > <u>Income</u> Total of All your Account combined.</p>
                {% else %}
                    <p>You don't have any Income register actually so we can not build statistic about it.</p>
                {% endif %}
            </div>
        </div>
        
        <div class="element" style="padding-top: 25px;">
            {% if app.user.getNbAccount() is defined %}
                {% set nbAccountsCount = app.user.getNbAccount() %}
                {% if nbAccountsCount <= 3 %}
                    <p><span class="background-plain"><b>{{ app.user.username }}.</b></span>, you have actually <b>{{ nbAccountsCount }}</b> accounts register on <b>ratWallet.</b> , here is the history of their balances :</p>
                    <div id="chartHistoryBalance" style="margin-top: 25px;"></div>
                {% else %}
                    <p><span class="background-plain"><b>{{ app.user.username }}.</b></span>, create one or more accounts to display their statistics.</p>
                {% endif %}
            {% endif %}
        </div>

        <!-- JF :  Ce graphique n'est pas affiché on est d'accord ? -->
        <div id="chartExpenseSumByCategory"></div> 

    </section>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>

    document.addEventListener('DOMContentLoaded', function () {
        fetch("{{ path('datahistorybalance') }}")
            .then(response => response.json())
            .then(data => {
                if (data && data.length > 0) {
                    var options = {
                        chart: {
                            type: 'area',
                            height: 350
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            curve: 'smooth'
                        },
                        title: {
                            text: 'GLOBAL Sold history',
                            align: 'left',
                            style: {
                                fontSize: '14px'
                            }
                        },
                        xaxis: {
                            categories: data[0].amountHistory.map((_, index) => index + 1)
                        },
                        yaxis: {
                            tickAmount: 4,
                            labels: {
                                style: {
                                    colors: '#8e8da4',
                                },
                                offsetY: -7,
                                offsetX: 0,
                            },
                            axisBorder: {
                                show: false,
                            },
                            axisTicks: {
                                show: false
                            }
                        },
                        fill: {
                            opacity: 0.5
                        },
                        tooltip: {
                            x: {
                                format: "yyyy",
                            },
                            fixed: {
                                enabled: false,
                                position: 'topRight'
                            }
                        },
                        grid: {
                            yaxis: {
                                lines: {
                                    offsetX: -30
                                }
                            },
                            padding: {
                                left: 20
                            }
                        },
                        series: data.map(accountData => ({
                            name: accountData.accountName,
                            data: accountData.amountHistory
                        }))
                    };
                    var chart = new ApexCharts(document.querySelector('#chartHistoryBalance'), options);
                    chart.render();
                } else {
                    console.error('Les données de l\'historique sont incorrectes.');
                }
            })
            .catch(error => {
                console.error('Erreur lors de la récupération des données de l\'historique:', error);
            });
    });

    /*document.addEventListener('DOMContentLoaded', function () {
        {#fetch("{{ path('expenseSumByCategory') }}")
            .then(response => response.json())
            .then(data => {
                if (data && data.accountExpenseSums && data.accountExpenseSums.length > 0) {
                    var options = {
                        series: data.accountExpenseSums.map(accountData => ({
                            name: accountData.account.name,
                            data: accountData.expenseSums,
                        })),
                        chart: {
                            type: 'bar',
                            height: 350,
                            stacked: true,
                            toolbar: {
                                show: true
                            },
                            zoom: {
                                enabled: true
                            }
                        },
                        responsive: [{
                            breakpoint: 480,
                            options: {
                                legend: {
                                    position: 'bottom',
                                    offsetX: -10,
                                    offsetY: 0
                                }
                            }
                        }],
                        plotOptions: {
                            bar: {
                                horizontal: false,
                                borderRadius: 10,
                                dataLabels: {
                                    total: {
                                        enabled: true,
                                        style: {
                                            fontSize: '13px',
                                            fontWeight: 900
                                        }
                                    }
                                }
                            },
                        },
                        xaxis: {
                            categories: data.categories,
                        },
                        legend: {
                            position: 'right',
                            offsetY: 40
                        },
                        fill: {
                            opacity: 1
                        }
                    };

                    var chart = new ApexCharts(document.querySelector('#chartExpenseSumByCategory'), options);
                    chart.render();
                } else {
                    console.error('Les données de la somme des dépenses sont incorrectes.');
                }
            })
            .catch(error => {
                console.error('Erreur lors de la récupération des données de la somme des dépenses:', error);
            });
    #});*/


    /* document.addEventListener('DOMContentLoaded', function () {
{# fetch("{{ path('categoryAllAccount') }}") #}
            .then(response => response.json())
            .then(data => {

                if (data && data.length > 0) {
                    var options = {
                        chart: {
                            type: 'bar',
                            height: 350,
                            stacked: true,
                        },
                        stroke: {
                            width: 1,
                            colors: ['#fff']
                        },
                        dataLabels: {
                            formatter: (val) => {
                                return val / 1000 + 'K'
                            }
                        },
                        plotOptions: {
                            bar: {
                                horizontal: false
                            }
                        },
                        fill: {
                            opacity: 1
                        },
                        colors: ['#80c7fd', '#008FFB', '#80f1cb', '#00E396'],
                        yaxis: {
                            labels: {
                                formatter: (val) => {
                                    return val / 1000 + 'K'
                                }
                            }
                        },
                        legend: {
                            position: 'top',
                            horizontalAlign: 'left'
                        }
                    };

                    // Transform your data to fit the series structure
                    var series = [];
                    data.forEach(function (accountData) {
                        accountData.expenseSums.forEach(function (expenseSum, index) {
                            var categorySeries = {
                                name: accountData.account.name + ' - ' + 'Q' + (index + 1) + ' ' + accountData.expenseSums[index].group,
                                group: accountData.expenseSums[index].group.toLowerCase(),
                                data: expenseSum
                            };

                            series.push(categorySeries);
                        });
                    });

                    options.series = series;

                    var chart = new ApexCharts(document.querySelector("#chartCategoryAllAccount"), options);
                    chart.render();
                }
            }});
    });
*/



    </script>

{% endblock %}
