{% extends 'base.html.twig' %}
{% block stylesheets %}
	<link rel="stylesheet" href="{{ asset('assets/css/pages/dashboard.css') }}">
{% endblock %}

{% block body %}
	<section class="dashboard">
		<div class="top-dash-content">
			<div class="element stats">
				<div style="display: flex; align-items: center;">
					<p>Account name :
						<span class="background-plain">{{account.nameAccount }}</span>
					</p>
				</div>
				<div>
					<p>Solde :
						<span>{{account.balance }}€</span>
					</p>
					<br>
					<p class="tooltip-container" data-tooltip="The sold goal you want to reach on this account">Goal :
						<span>{{ totalGoal }}€</span>
					</p>
				</div>
				<div>
					<p class="tooltip-container" data-tooltip="Total of all Incoming Money since creation of this account">Total Income :
						<span>{{ totalIncomeAmount }}€</span>
					</p>
					<br>
					<p class="tooltip-container" data-tooltip="Total of all Expense Money since creation of this account">Total Expense :
						<span>{{ totalExpenseAmount }}€</span>
					</p>
				</div>
			</div>
			<div class="element transactions">
				<button>
					<i class="bi bi-plus-square-fill tooltip-container" data-tooltip="Make an Income" id="addIncome"></i>
				</button>
				<button>
					<i class="bi bi-dash-square-fill tooltip-container" data-tooltip="Make an Expense"  id="addExpense"></i>
				</button>
				<div class="toastForm element" id="incomeForm">
					<div>
						{{ form_start(incomeForm, {'attr': {'class': 'income-form', 'id': 'incomeFormId'} } ) }}
						<h3>Add a Money <span>Income</span></h3>
						{{ form_row(incomeForm.amount) }}
						{{ form_row(incomeForm.description) }}
						{{ form_row(incomeForm.category) }}
						<div class="btn-div">
							<a href="#" id="linkFormIncome" class="button button--pan">
								<span>
									Add<i class="bi bi-plus-circle-fill"></i>
								</span>
							</a>
						</div>
						{{ form_end(incomeForm) }}
					</div>
				</div>
				<div class="toastForm element" id="expenseForm">
					<div>
						{{ form_start(expenseForm, {'attr': {'class': 'expense-form', 'id': 'expenseFormId'} } ) }}
						<h3>Add a Money <span>Expense</span></h3>
						{{ form_row(expenseForm.amount) }}
						{{ form_row(expenseForm.description) }}
						{{ form_row(expenseForm.category) }}
						<div class="btn-div">
							<a href="#" id="linkFormExpense" class="button button--pan"> 
								<span>
									Add<i class="bi bi-plus-circle-fill"></i>
								</span>
							</a>
						</div>
						{{ form_end(expenseForm) }}
					</div>
				</div>
			</div>
			<div class="element historyLink">
				<a href="{{ path('recap',{'id': account.id}) }}" class="tooltip-container" data-tooltip="Let's see your transaction's history"><i class="bi bi-table"></i></a>
			</div>
			<div class="element goalLink">
				<a href="{{ path('create_goal',{'id': account.id}) }}" class="tooltip-container" data-tooltip="Define your account sold Goal"><i class="bi bi-wallet"></i></a>
			</div>
			<div class="element goalLink">
				<a href="{{ path('add_budget',{'id': account.id}) }}" class="tooltip-container" data-tooltip="Add budget to category."><i class="bi bi-cash-coin"></i></a>
			</div>
			<div class="element deleteLink">
				<a href="{{ path('delete_account',{'id': account.id}) }}" class="tooltip-container" data-tooltip="Delete this account."><i class="bi bi-trash-fill"></i></a>
			</div>

		</div>
					
		<div class="dashboard-content">
			<div class="element">
				<div id="chartHistoryBalanceByAccount"></div>
			</div>

			<div style="display: flex; height: 395px;">
				<div class="element">
					<div id="chartGoal"></div>
				</div>
				<div id="chartExpenseSumByCategory" class="element"></div>

			</div>
			<div class="element">
				<div id="chartMonthlyExpensesByCategory"></div>
			</div>
				<!-- <canvas id="myChart" class="linearChart element"></canvas>
				<canvas id="myPieChart" class="pieChart"></canvas> -->
				<!-- <div id="chart"></div> -->

				<!-- marche pas -->
				<!-- <div id="chartExpenseSumByCategory"></div> -->
		</div>
</section>
{% endblock %}
{% block javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

    <script>
        let incomeFormElement;
        let expenseFormElement;
        let incomeButton, expenseButton;

        document.addEventListener('DOMContentLoaded', function () {
			incomeFormElement = document.getElementById('incomeForm');
			expenseFormElement = document.getElementById('expenseForm');
			incomeButton = document.getElementById('addIncome');
			expenseButton = document.getElementById('addExpense');

			// Make the <a> link can be use like a <button type="submit"> for income an expense forms
			let formulaireIn = document.getElementById('incomeFormId');
			let linkIn = document.getElementById('linkFormIncome');

			linkIn.addEventListener('click', function (event) {
				event.preventDefault();
				formulaireIn.submit();
			});

			let formulaireEx = document.getElementById('expenseFormId');
			let linkEx = document.getElementById('linkFormExpense');

			linkEx.addEventListener('click', function (event) {
				event.preventDefault();
				formulaireEx.submit();
			});
        });

        document.addEventListener('click', function (event) {
			if (event.target == incomeButton) {
				incomeFormElement.style.display = 'block';
				expenseFormElement.style.display = 'none';

				// URL Update
				const newUrl = window.location.href.split('?')[0] + '?type=income';
				history.pushState({}, '', newUrl);
				return;
			}
			if (event.target == expenseButton) {
				incomeFormElement.style.display = 'none';
				expenseFormElement.style.display = 'block';
				
				// URL Update
				const newUrl = window.location.href.split('?')[0] + '?type=expense';
				history.pushState({}, '', newUrl);
				return;
			}
			if (incomeFormElement.contains(event.target) || expenseFormElement.contains(event.target)) {
				return;
			}
			incomeFormElement.style.display = 'none';
			expenseFormElement.style.display = 'none';
        });

		document.addEventListener('DOMContentLoaded', function () {
			fetch("{{ path('datacategory', { 'id': account.id} ) }}")
					.then(response => response.json())
					.then(data => {
						if (data && data.data && data.data.series && data.data.series.length > 0 && data.data.categories && data.data.categories.length > 0) {
							var options = {
								chart: {
									type: 'bar',
									height: 350
								},
								dataLabels: {
									enabled: true
								},
								stroke: {
									show: true,
									width: 2,
									colors: ['transparent']
								},
								series: [{
									name: 'Total Amount',
									data: data.data.series
								}],
								xaxis: {
									categories: data.data.categories
								},
								yaxis: {
									title: {
										text: '€ (Euro)'
									}
								},
							};

							var chart = new ApexCharts(document.querySelector('#chart'), options);
							chart.render();
						} else {
							console.error('Les données du graphique sont incorrectes.');
						}
					})
					.catch(error => {
						console.error('Erreur lors de la récupération des données du graphique:', error);
					});
		});

			document.addEventListener('DOMContentLoaded', function () {
			fetch("{{ path('goal_progress', { 'id': account.id} ) }}")
					.then(response => response.json())
					.then(data => {
						var options = {
							series: [data.progress],
							chart: {
								height: 350,
								type: 'radialBar',
								toolbar: {
									show: true
								}
							},
							plotOptions: {
								radialBar: {
									startAngle: -135,
									endAngle: 225,
									hollow: {
										margin: 0,
										size: '70%',
										background: '#fff',
										image: undefined,
										imageOffsetX: 0,
										imageOffsetY: 0,
										position: 'front',
										dropShadow: {
											enabled: true,
											top: 3,
											left: 0,
											blur: 4,
											opacity: 0.24
										}
									},
									track: {
										background: '#fff',
										strokeWidth: '67%',
										margin: 0, // margin is in pixels
										dropShadow: {
											enabled: true,
											top: -3,
											left: 0,
											blur: 4,
											opacity: 0.35
										}
									},

									dataLabels: {
										show: true,
										name: {
											offsetY: -10,
											show: true,
											color: '#888',
											fontSize: '17px'
										},
										value: {
											formatter: function(val) {
												return parseFloat(val).toFixed(2); // Vous pouvez ajuster le nombre de décimales après la virgule selon vos besoins
											},
											color: '#111',
											fontSize: '36px',
											show: true,
										}

									}
								}
							},
							fill: {
								type: 'gradient',
								gradient: {
									shade: 'dark',
									type: 'horizontal',
									shadeIntensity: 0.5,
									gradientToColors: ['#ABE5A1'],
									inverseColors: true,
									opacityFrom: 1,
									opacityTo: 1,
									stops: [0, 100]
								}
							},
							stroke: {
								lineCap: 'round'
							},
							labels: ['Goal'],
						};

						var chart = new ApexCharts(document.querySelector("#chartGoal"), options);
						chart.render();
					})
					.catch(error => {
						console.error('Erreur lors de la récupération des données de progression:', error);
					});
		});


		document.addEventListener('DOMContentLoaded', function () {
			fetch("{{ path('historyBalanceAccount', {'id': account.id}) }}")
					.then(response => response.json())
					.then(data => {
						if (data && data.length > 0) {
							var options = {
								series: [{
									name: data[0].accountName,
									data: data[0].amountHistory
								}],
								chart: {
									type: 'area',
									stacked: false,
									height: 350,
									zoom: {
										type: 'x',
										enabled: true,
										autoScaleYaxis: true
									},
									toolbar: {
										autoSelected: 'zoom'
									}
								},
								dataLabels: {
									enabled: false
								},
								markers: {
									size: 0,
								},
								title: {
									text: 'Progression par rapport à l\'objectif',
									align: 'left'
								},
								fill: {
									type: 'gradient',
									gradient: {
										shadeIntensity: 1,
										inverseColors: false,
										opacityFrom: 0.5,
										opacityTo: 0,
										stops: [0, 90, 100]
									},
								},
								yaxis: {
									labels: {
										formatter: function (val) {
											return val.toFixed(0);
										},
									},
									title: {
										text: 'Balance'
									},
								},
								xaxis: {
									type: 'datetime',
									categories: data[0].amountHistory.map(entry => entry.x), // Utilisez les timestamps comme catégories
								},
								tooltip: {
									shared: false,
									y: {
										formatter: function (val) {
											return val.toFixed(0);
										}
									}
								}
							};

							var chart = new ApexCharts(document.querySelector('#chartHistoryBalanceByAccount'), options);
							chart.render();
						} else {
							console.error('Les données de l\'historique sont incorrectes.');
						}
					})
					.catch(error => {
						console.error('Erreur lors de la récupération des données de l\'historique:', error);
					});
		});

		document.addEventListener('DOMContentLoaded', function () {
			fetch("{{ path('expenseSumByCategory', {'id': account.id}) }}")
					.then(response => response.json())
					.then(data => {
						if (data) {
							var options = {
								series: data.categories.map((category, index) => ({
									name: category,
									data: [data.expenseSums[index]],
								})),
								chart: {
									type: 'bar',
									height: 350,
									stacked: true,
									toolbar: {
										show: true
									},
									zoom: {
										enabled: true
									}
								},
								responsive: [{
									breakpoint: 480,
									options: {
										legend: {
											position: 'bottom',
											offsetX: -10,
											offsetY: 0
										}
									}
								}],
								plotOptions: {
									bar: {
										horizontal: false,
										borderRadius: 10,
										dataLabels: {
											total: {
												enabled: true,
												style: {
													fontSize: '13px',
													fontWeight: 900
												}
											}
										}
									},
								},
								xaxis: {
									categories: data.categories,
								},
								legend: {
									position: 'right',
									offsetY: 40
								},
								fill: {
									opacity: 1
								}
							};

							var chart = new ApexCharts(document.querySelector('#chartExpenseSumByCategory'), options);
							chart.render();
						} else {
							console.error('Les données de la somme des dépenses sont incorrectes.');
						}
					})
					.catch(error => {
						console.error('Erreur lors de la récupération des données de la somme des dépenses:', error);
					});
		});


		document.addEventListener('DOMContentLoaded', function () {
			fetch("{{ path('sum', {'id': account.id}) }}")
					.then(response => response.json())
					.then(data => {
						if (data) {
							var actualData = data.map(item => {
								return {
									x: item.year,  // Utilisez la date du point de données
									y: item.totalAmount,  // Utilisez le totalAmount comme y
									goals: [
										{
											name: 'Expected',
											value: item.budgetAmount,  // Utilisez le budgetAmount comme valeur attendue
											strokeHeight: 5,
											strokeColor: '#775DD0'
										}
									]
								};
							});

							var options = {
								series: [
									{
										name: 'Actual',
										data: actualData
									}
								],
								chart: {
									height: 350,
									type: 'bar'
								},
								plotOptions: {
									bar: {
										columnWidth: '60%'
									}
								},
								colors: ['#00E396'],
								dataLabels: {
									enabled: false
								},
								legend: {
									show: true,
									showForSingleSeries: true,
									customLegendItems: ['Actual', 'Expected'],
									markers: {
										fillColors: ['#00E396', '#775DD0']
									}
								}
							};

							var chart = new ApexCharts(document.querySelector('#chartMonthlyExpensesByCategory'), options);
							chart.render();
						} else {
							console.error('Les données de la somme des dépenses sont incorrectes.');
						}
					})
					.catch(error => {
						console.error('Erreur lors de la récupération des données de la somme des dépenses:', error);
					});
		});

	</script>
{% endblock %}
